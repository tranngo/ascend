// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         TeamEnrollment[]
  ChampionPool  ChampionPool[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id     Int              @id @default(autoincrement())
  name   String
  users  TeamEnrollment[]
  events TeamEvent[]
}

model TeamEnrollment {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   Int
  joinedAt DateTime @default(now())

  @@id([userId, teamId])
}

model TeamEvent {
  id     Int      @id @default(autoincrement())
  title  String
  start  DateTime
  end    DateTime
  allDay Boolean
  team   Team     @relation(fields: [teamId], references: [id])
  teamId Int
}

model ChampionPool {
  id               Int                      @id @default(autoincrement())
  championId       String
  proficiencyLevel ChampionProficiencyLevel
  user             User                     @relation(fields: [userId], references: [id])
  userId           String
}

enum ChampionProficiencyLevel {
  Beginner
  Intermediate
  Advanced
  Mastery
}
